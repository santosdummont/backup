{"version":3,"sources":["components/Entry/styles.scss","components/Section/styles.scss","components/Entry/index.js","components/Section/index.js","containers/Home/index.js","api/data.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Entry","this","props","title","subtitle","image","link","content","languages","className","styles","container","src","alt","map","language","index","name","React","Component","Section","data","entries","entry","key","Home","page","sections","section","homeData","pageName","type","cols","background","toolsUsed","App","console","log","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iGACAA,EAAOC,QAAU,CAAC,UAAY,4B,kBCA9BD,EAAOC,QAAU,CAAC,UAAY,4B,0LCqCfC,E,iLAjCD,IAAD,EAQDC,KAAKC,MANLC,EAFC,EAEDA,MACAC,EAHC,EAGDA,SACAC,EAJC,EAIDA,MACAC,EALC,EAKDA,KACAC,EANC,EAMDA,QACAC,EAPC,EAODA,UAEJ,OACI,yBAAKC,UAAWC,IAAOC,WACnB,yBAAKF,UAAWC,IAAOP,OAAQA,GAC9BC,EACD,yBAAKQ,IAAKP,EAAOQ,IAAKV,IACrBG,EACAC,EACAC,GAAaA,EAAUM,IAAI,SAACC,EAAUC,GACnC,OAAQD,EAASE,MACb,IAAK,MAEL,IAAK,QACD,OAAO,yBAAKL,IAAI,gFAAgFC,IAAKE,EAASE,OAClH,QAAS,OAAO,a,GAvBpBC,IAAMC,W,gBC4BXC,E,iLAxBH,IAENC,EACEpB,KAAKC,MADPmB,KAGIC,EAAUD,EAAKC,SAAWD,EAAKC,QAAQR,IAAI,SAACS,EAAOP,GAAR,OAC/C,kBAAC,EAAD,CACEQ,IAAKR,EACLb,MAAOoB,EAAMpB,MACbC,SAAUmB,EAAMnB,SAChBC,MAAOkB,EAAMlB,MACbE,QAASgB,EAAMhB,QACfD,KAAMiB,EAAMjB,KACZE,UAAWe,EAAMf,cAGrB,OACE,yBAAKC,UAAWC,IAAOC,WACpBW,O,GApBaJ,IAAMC,WCgBbM,E,iLAjBD,IAEFJ,EACApB,KAAKC,MADLmB,KAEJ,OACI,6BACIA,EAAKP,IAAI,SAACY,GACP,OAAIA,EACOA,EAAKC,SAASb,IAAI,SAACc,EAASZ,GAAV,OAAoB,kBAAC,EAAD,CAASQ,IAAKR,EAAOK,KAAMO,MAErE,Y,GAXPV,IAAMC,WCsDVU,EA1DE,CAAC,CACdC,SAAU,OACVH,SAAU,CACN,CACIV,KAAM,OACNc,KAAM,OACNC,KAAM,IACN7B,MAAO,qBACPC,SAAU,oBACV6B,WAAY,IAEhB,CACIhB,KAAM,WACNc,KAAM,OACNC,KAAM,IACNV,QAAS,CACL,CACInB,MAAO,MACPC,SAAU,WACVE,KAAM,wBACND,MAAO,oEACPE,QAAS,yJACT2B,UAAW,CACP,CACIjB,KAAM,SAEV,CACIA,KAAM,OAEV,CACIA,KAAM,gBAIlB,CACId,MAAO,OACPC,SAAU,WACVE,KAAM,wBACND,MAAO,oEACPE,QAAS,yJACTC,UAAW,CACP,CACIS,KAAM,SAEV,CACIA,KAAM,OAEV,CACIA,KAAM,iBAKtBgB,WAAY,OCvCTE,MAVf,WAEE,OADAC,QAAQC,IAAIhB,GAEV,yBAAKZ,UAAU,OACb,kBAAC,EAAD,CACEY,KAAMA,MCGMiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.4e0ba35e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__3JaCH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__z8iVX\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './styles.scss';\n\nclass Entry extends React.Component {\n    render() {\n        const {\n            title,\n            subtitle,\n            image,\n            link,\n            content,\n            languages,\n        } = this.props;\n        return (\n            <div className={styles.container}>\n                <div className={styles.title}>{title}</div>\n                {subtitle}\n                <img src={image} alt={title} />\n                {link}\n                {content}\n                {languages && languages.map((language, index) => {\n                    switch (language.name) {\n                        case 'css':\n                            return <img src='https://cdn4.iconfinder.com/data/icons/iconsimple-programming/512/css-512.png' alt={language.name} />\n                        case 'html5':\n                            return <img src='https://cdn4.iconfinder.com/data/icons/iconsimple-programming/512/css-512.png' alt={language.name} />\n                        default: return null\n                    }\n                }\n                )}\n            </div>\n        );\n    }\n}\n\n\n\nexport default Entry;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Entry from 'components/Entry';\nimport styles from './styles.scss';\n\n\nclass Section extends React.Component {\n\n  render() {\n    const {\n      data\n    } = this.props;\n\n    const entries = data.entries && data.entries.map((entry, index) => (\n      <Entry\n        key={index}\n        title={entry.title}\n        subtitle={entry.subtitle}\n        image={entry.image}\n        content={entry.content}\n        link={entry.link}\n        languages={entry.languages}\n      />\n    ));\n    return (\n      <div className={styles.container}>\n        {entries}\n      </div>\n    );\n  }\n}\n\nexport default Section;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Section from 'components/Section';\n\nclass Home extends React.Component {\n    render() {\n        const {\n            data\n        } = this.props;\n        return (\n            <div>\n               {data.map((page) => {\n                   if (page) {\n                       return page.sections.map((section, index) => <Section key={index} data={section}/>)\n                   }\n                   return null \n               })}\n            </div>\n        );\n    }\n}\n\nexport default Home;","const homeData = [{\n    pageName: 'Home',\n    sections: [\n        {\n            name: 'Hero',\n            type: 'hero',\n            cols: '1',\n            title: 'Santos Castillo O.',\n            subtitle: 'Dise√±aor UI/UX',\n            background: '',\n        },\n        {\n            name: 'About me',\n            type: 'cols',\n            cols: '2',\n            entries: [\n                {\n                    title: 'OPV',\n                    subtitle: 'subtitle',\n                    link: 'http://www.google.com',\n                    image: 'https://image.lag.vn/upload/news/19/06/06/erangel-remake_YLZG.jpg',\n                    content: 'Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industrys standard dummy text ever since the 1500s',\n                    toolsUsed: [\n                        {\n                            name: 'html5',\n                        },\n                        {\n                            name: 'css',\n                        },\n                        {\n                            name: 'javascript',\n                        },\n                    ]\n                },\n                {\n                    title: 'Otra',\n                    subtitle: 'subtitle',\n                    link: 'http://www.google.com',\n                    image: 'https://image.lag.vn/upload/news/19/06/06/erangel-remake_YLZG.jpg',\n                    content: 'Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industrys standard dummy text ever since the 1500s',\n                    languages: [\n                        {\n                            name: 'html5',\n                        },\n                        {\n                            name: 'css',\n                        },\n                        {\n                            name: 'javascript',\n                        },\n                    ]\n                }\n            ],\n            background: '',\n        }\n    ]\n}]\n\nexport default homeData;","import React from 'react';\nimport Home from 'containers/Home'\nimport data from 'api/data.js';\n\nfunction App() {\n  console.log(data);\n  return (\n    <div className=\"App\">\n      <Home \n        data={data}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}